Irken is a statically-typed, simplified variant of Scheme.  Or, a lisp-like variant of ML.

Why: to host massively scalable systems scriptable via a python-like language.
How: compile a vm using continuation-passing style to avoid using the C stack.

Blog:         http://alien.nightmare.com/
GitHub:       https://github.com/samrushing/irken-compiler/
Older Source: http://nightmare.com/rushing/irken/

Introduction/Tutorial:
--------------------------------------------------------------------------------

  http://dark.nightmare.com/rushing/public_html/irken/irken/lang.html

The best way to get familiar with the language is to read the source code in
the 'self' directory, and browse over the files in "tests".

Installation:
--------------------------------------------------------------------------------

Irken is now written in itself, so you need to bootstrap it.  You can do this
via the python script, or manually.
[see https://github.com/samrushing/irken-compiler/wiki/bootstrapping-manually]

Just run the script "util/bootstrap.py":

$ python util/bootstrap.py
[to use clang:
  $ CC=clang python util/bootstrap.py ]

Which does the following:
1) compile the distributed version of self/compile.c
2) this binary will be used to recompile the compiler.
3) that binary will recompile the compiler again.
4) the output from steps 2 and 3 are compared, they should be identical.

If you're happy with the resulting compiler, you can compile an
optimized version of self/compile.c, but be warned - you may need a
lot of time and memory.  At this time (early 2012), clang builds -O2
in about 8 minutes, and -O0 in about 4 seconds.

120306: The 'no-nested-funs' branch has been merged into main.  I recommend
  the use of 'clang' to build irken.  [I'm also looking closely at writing a
  direct-to-llvm backend].

110326 Release Note: there is currently something very wrong with the
  combination of recursive types and rows, which shows up when using
  the new 'OO-like' feature (the '::' syntax).  It seems to be
  completely destroying all type safety.  So for now just stay away
  from that stuff until I can figure out what's going wrong.
