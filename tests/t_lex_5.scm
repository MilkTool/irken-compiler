(include "lib/core.scm")
(include "lib/string.scm")
(include "lib/io.scm")
(include "lib/pair.scm")
(include "lib/vector.scm")
(include "lib/symbol.scm")

(define (lex filename)

  (let ((fd (open filename 0))
	(current '())
	(tokens '())
	(final #f)
	(last-final #f)
	(s #f)
	(slen 0)
	)

      ;; defines the <step> function (DFA) from the lexer generator (in parse/lexer.py)
      (include "tests/step5.scm")

      (set! s (read fd 12000))
      (set! slen (string-length s))
      (if (%zero? slen)
	  (begin (print-string "done?") #t)
	  (let char-loop ((i 0)
			  (n 1000)
			  (ch #f)
			  (state 0))
	    (cond ((eq? n 0)
		   #t)
		  ((eq? i slen)
		   (char-loop 0 (- n 1)))
		  (else
		   (set! ch (string-ref s i))
		   (set! state (step ch state))
		   (set! final (vector-ref finals state))
		   (cond ((and last-final (not final))
			  ;; transition out
			  (set! current '())
			  (set! last-final #f)
			  (set! state 0)
			  (char-loop i))
			 (else
			  (set! last-final final)
			  (set! current (cons ch current))
			  (char-loop (+ i 1))))))
	    ))
      ))

(lex "parse/lexer.py")
