
(include "lib/core.scm")
(include "lib/frb.scm")
(include "lib/random.scm")
(include "lib/string.scm")
(include "lib/symbol.scm")

(define (random-tree n)
  (let loop ((i n)
	     (t (node/empty)))
    (if (= i 0)
	t
	(loop (- i 1) (node:insert t < (random) i)))))

(let ((t (node/empty)))
  (print-string "testing\n")
  (set! t (node:insert t < 19 2000))
  (set! t (node:insert t < 12 1000))
  (set! t (node:insert t < 99 9900))
  (set! t (node:insert t < 8 800))
  (set! t (node:insert t < -30 -3000))
  (printn t)
  (node:print t)
  (printn (node:member t < 12))
  (printn (node:member t < 20))
  (printn (node:member t < 19))
  (define (pitem k v)
    (print k)
    (print-string ":")
    (print v)
    (print-string ","))
  (let ((t2 (random-tree 20)))
    (node:print t2)
    (node:inorder t2 pitem)
    (let ((g (node:make-generator t2 -1 -1)))
      (print-string "\n")
      (printn (g))
      (printn (g))
      (printn (g))
      (printn (g))
      (printn (g))
      (printn (g))
      )
    )
  (print-string "\n")
  (printn (node:insert (node:insert (node/empty) < 0 "howdy!") < 1 "there"))
  )

  
