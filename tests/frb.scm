
(include "lib/core.scm")
(include "lib/frb.scm")
(include "lib/random.scm")

(define (random-tree n)
  (let loop ((i n)
	     (t (node/empty)))
    (if (= i 0)
	t
	(loop (- i 1) (tree:insert t < (random) i)))))

;; (define (make-tree-generator tree)
;;   (make-generator
;;    (lambda (consumer)
;;      (tree-inorder tree consumer)
;;      (let loop ()
;;        (consumer 'end-of-tree)
;;        (loop))
;;      )))

(let ((t (node/empty)))
  (print-string "testing\n")
  (set! t (tree:insert t < 19 2000))
  (set! t (tree:insert t < 12 1000))
  (set! t (tree:insert t < 99 9900))
  (set! t (tree:insert t < 8 800))
  (set! t (tree:insert t < -30 -3000))
  (printn t)
  (tree:print t)
  (printn (tree:member t < 12))
  (printn (tree:member t < 20))
  (printn (tree:member t < 19))
  (define (pitem k v)
    (print k)
    (print-string ":")
    (print v)
    (print-string ","))
  (let ((t2 (random-tree 20)))
    (tree:print t2)
    (tree:inorder t2 pitem)
    )
  (print-string "\n")
  (printn (tree:insert (tree:insert (node/empty) < 0 "howdy!") < 1 "there"))
  )

  
