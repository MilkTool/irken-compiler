;; -*- Mode: Irken -*-

(include "lib/basis.scm")
(include "lib/map.scm")
(include "lib/combinatorics.scm")

(printf "one\n")
(for-list comb (combinations '(0 1 2 3 4) 3)
  (printn comb))
(printf "two\n")
(for comb (combinations* '(0 1 2 3 4) 3)
  (printn comb))
(printf "three\n")
(for comb (combinations* '(0 1 2 3 4 5) 3)
  (printn comb))
(printf "four\n")
(for comb (combinations* '(0 1 2 3 4 5) 2)
  (printn comb))
(printf "five\n")
(for comb (combinations** '(0 1 2 3 4 5) 2)
  (printn comb))
(define (rcombinations xs k)
  (makegen emit
    (cond ((= k 0) (emit (list:nil)))
          ((not (null? xs))
           (for sub (rcombinations (rest xs) k)
             (emit sub))
           (for sub (rcombinations (rest xs) (- k 1))
             (emit (list:cons (first xs) sub)))))))
(for comb (rcombinations '(0 1 2 3 4 5) 2)
  (printn comb))
