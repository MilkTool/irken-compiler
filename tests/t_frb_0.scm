
(include "lib/core.scm")
(include "lib/vector.scm")
(include "lib/pair.scm")
(include "lib/string.scm")
(include "lib/random.scm")
(include "lib/symbol.scm")
(include "lib/frb.scm")

(define (make-eq-tree)
  (make-tree
   (lambda (x y) (%lt? x y))
   #f))

(let ((t (make-eq-tree))
      (space " "))
  (define (dump k v)
    (%print (cons k v)))
  (let loop ((n 20))
    (cond ((%gt? n 0)
	   (set! t (tree-insert t n n))
	   (loop (%- n 1)))))
  (%printn dump)
  (%printn (tree-member t 9))
  (%printn (tree-member t 17))
  (%printn (tree-member t 21))
  (tree-inorder t dump)
  (print-string "done?")
  (%printn #t)
  )
    
(let ((t (make-eq-tree))
      (space " "))
  (let loop ((n 20))
    (cond ((%gt? n 0)
	   (set! t (tree-insert t n n))
	   (loop (%- n 1)))))
  (let ((g (make-tree-generator t)))
    (%printn g)
    (%printn (g))
    (%printn (g))
    (%printn (g))))
  
(define (make-string-equal?-tree)
  (make-tree string-<? #f))

(let ((t (make-string-equal?-tree)))
  (define (dump k v)
    (%print (cons k v)))
  (set! t (tree-insert t "hello" 0))
  (set! t (tree-insert t "dolly" 1))
  (set! t (tree-insert t "rubber" 2))
  (set! t (tree-insert t "donkey" 3))	
  (set! t (tree-insert t "synonym" 4))
  (set! t (tree-insert t "antonym" 5))
  (set! t (tree-insert t "antonym" 6))
  (tree-inorder t dump)
  (print-string "\n")
  (let ((gen (make-tree-generator t)))
    (%printn (gen))
    (%printn (gen))
    (%printn (gen))
    (%printn (gen))
    (%printn (gen))
    (%printn (gen))
    (%printn (gen))
    )
  )
