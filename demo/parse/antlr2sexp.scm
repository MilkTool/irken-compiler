;; -*- Mode: Irken -*-

(include "lib/basis.scm")
(include "lib/map.scm")
(include "lib/parse/lexer.scm")
(include "lib/parse/glextab.scm")
(include "lib/parse/earley.scm")
(include "lib/parse/gparser.scm")

(define prod->sexp
  (prod:nt name) -> (sexp:symbol name)
  (prod:t name)  -> (sexp:symbol name)
  )

(define prods->sexp
  (one) -> (prod->sexp one)
  prods -> (sexp:list (map prod->sexp prods))
  )

(if (< sys.argc 2)
    (begin
      (printf "\nTranslate an ANTLR-style grammar to s-expression form.\n\n")
      (printf "Usage: " sys.argv[0] " c.g\n")
      (printf "  [note: this library does not understand the full ANTLR syntax, but only\n")
      (printf "    basic grammar productions (i.e., no lexing, no *?+ etc]\n")
      )
    (let ((gram (read-grammar sys.argv[1]))
          (r '()))
      (alist/iterate
       (lambda (name alts)
         (push! r (sexp1 name (map prods->sexp alts))))
       gram)
      (printf ";; -*- Mode: Irken -*-\n\n")
      (printf ";; generated by " sys.argv[0] " from " sys.argv[1] "\n")
      (printf ";;  -- do not edit --\n\n")
      (pp (sexp1 'grammar r) 80)
      ))

