;; -*- Mode: Irken -*-

;; This lexer was originally converted automatically (by antlr2irken) from
;; https://github.com/antlr/grammars-v4/blob/master/c/C.g4
;;
;; Several manual cleanups/adjustments have been made, however.  So if you need
;;  to 'update' using a new antlr grammar you'll want to carefully go over the
;;  results and move any changes into here manually.

(lexicon
  (Not (set #\!))
  (Mod (set #\%))
  (And (set #\&))
  (LeftParen (set #\())
  (RightParen (set #\)))
  (Star (set #\*))
  (Plus (set #\+))
  (Comma (set #\,))
  (Minus (set #\-))
  (Dot (set #\.))
  (Div (set #\/))
  (Colon (set #\:))
  (Semi (set #\;))
  (Less (set #\<))
  (Assign (set #\=))
  (Greater (set #\>))
  (Question (set #\?))
  (LeftBracket (set #\[))
  (RightBracket (set #\]))
  (Caret (set #\^))
  (LeftBrace (set #\{))
  (Or (set #\|))
  (RightBrace (set #\}))
  (Tilde (set #\~))
  (Whitespace (+ (set #\tab #\space)))
  (NotEqual (cat (set #\!) (set #\=)))
  (Nullability
   (or (lit "_Nullable")
       (lit "_Nonnull")
       (lit "_Null_unspecified")))
  (M128 (or (lit "__m128i") (lit "__m128d") (lit "__m128")))
  (BaseTypes
   (or
    (lit "__m128i")
    (lit "__m128d")
    (lit "__m128")
    (lit "_Complex")
    (lit "_Bool")
    (lit "unsigned")
    (lit "signed")
    (lit "double")
    (lit "float")
    (lit "long")
    (lit "int")
    (lit "short")
    (lit "char")
    (lit "void")))
  (FunSpec (or (lit "__stdcall") (lit "__inline__") (lit "__inline") (lit "inline") (lit "_Noreturn")))
  (Asm (or (lit "__asm") (lit "__asm__")))
  (Attribute (lit "__attribute__"))
  (BuiltinOffsetof (lit "__builtin_offsetof"))
  (BuiltinVaArg (lit "__builtin_va_arg"))
  (DeclSpec (lit "__declspec"))
  (Extension (lit "__extension__"))
  (TypeOf (lit "__typeof__"))
  (LineAfterPreprocessing
   (cat
    (set #\#)
    (set #\l)
    (set #\i)
    (set #\n)
    (set #\e)
    (* (+ (set #\tab #\space)))
    (* (not (set #\newline #\return)))))
  (LineDirective
   (cat
    (set #\#)
    (? (+ (set #\tab #\space)))
    (set (#\1 #\9))
    (* (set (#\0 #\9)))
    (? (+ (set #\tab #\space)))
    (? (or (set #\L #\U #\u) (cat (set #\u) (set #\8))))
    (set #\")
    (?
     (+
      (or
       (not (set #\newline #\return #\" #\\))
       (cat (set #\\) (set #\newline))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set #\return) (set #\newline))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]"))))))
    (set #\")
    (* (not (set #\newline #\return)))))
  (ComplexDefine
   (cat
    (set #\#)
    (? (+ (set #\tab #\space)))
    (set #\d)
    (set #\e)
    (set #\f)
    (set #\i)
    (set #\n)
    (set #\e)
    (* (not (set #\#)))))
  (PragmaDirective
   (cat
    (set #\#)
    (? (+ (set #\tab #\space)))
    (set #\p)
    (set #\r)
    (set #\a)
    (set #\g)
    (set #\m)
    (set #\a)
    (set #\tab #\space)
    (* (set #\tab #\space))
    (* (not (set #\newline #\return)))))
  (ModAssign (cat (set #\%) (set #\=)))
  (AndAnd (cat (set #\&) (set #\&)))
  (AndAssign (cat (set #\&) (set #\=)))
  (StarAssign (cat (set #\*) (set #\=)))
  (PlusPlus (cat (set #\+) (set #\+)))
  (PlusAssign (cat (set #\+) (set #\=)))
  (MinusMinus (cat (set #\-) (set #\-)))
  (MinusAssign (cat (set #\-) (set #\=)))
  (Arrow (cat (set #\-) (set #\>)))
  (Ellipsis (cat (set #\.) (set #\.) (set #\.)))
  (DivAssign (cat (set #\/) (set #\=)))
  (BlockComment (cat (set #\/) (set #\*) (? (* (set dot))) (set #\*) (set #\/)))
  (LineComment (cat (set #\/) (set #\/) (* (not (set #\newline #\return)))))
  (LeftShift (cat (set #\<) (set #\<)))
  (LessEqual (cat (set #\<) (set #\=)))
  (LeftShiftAssign (cat (set #\<) (set #\<) (set #\=)))
  (Equal (cat (set #\=) (set #\=)))
  (GreaterEqual (cat (set #\>) (set #\=)))
  (RightShift (cat (set #\>) (set #\>)))
  (RightShiftAssign (cat (set #\>) (set #\>) (set #\=)))
  (XorAssign (cat (set #\^) (set #\=)))
  (Alignas (lit "_Alignas"))
  (Alignof (lit "_Alignof"))
  (Atomic (lit "_Atomic"))
  (Generic (lit "_Generic"))
  (StaticAssert (lit "_Static_assert"))
  (ThreadLocal (or (lit "_Thread_local") (lit "__thread")))
  ;; this probably needs filtering in partition-stream.
  (AsmBlock (cat (set #\a) (set #\s) (set #\m) (* (not (set #\{))) (set #\{) (* (not (set #\}))) (set #\})))
  (Auto (lit "auto"))
  (Break (lit "break"))
  (Case (lit "case"))
  (Const (lit "const"))
  (Continue (lit "continue"))
  (Do (lit "do"))
  (Default (lit "default"))
  (Else (lit "else"))
  (Enum (lit "enum"))
  (Extern (lit "extern"))
  (For (lit "for"))
  (Goto (lit "goto"))
  (If (lit "if"))
  (Register (lit "register"))
  (Restrict (or (lit "restrict") (lit "__restrict__") (lit "__restrict")))
  (Return (lit "return"))
  (Sizeof (lit "sizeof"))
  (Static (lit "static"))
  (Struct (lit "struct"))
  (Switch (lit "switch"))
  (Typedef (lit "typedef"))
  (Union (lit "union"))
  (Volatile (lit "volatile"))
  (While (lit "while"))
  (OrAssign (cat (set #\|) (set #\=)))
  (OrOr (cat (set #\|) (set #\|)))
  (StringLiteral
   (cat
    (? (or (set #\L #\U #\u) (cat (set #\u) (set #\8))))
    (set #\")
    (?
     (+
      (or
       (not (set #\newline #\return #\" #\\))
       (cat (set #\\) (set #\newline))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set #\return) (set #\newline))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]"))))))
    (set #\")))
  (Identifier
   (cat
    (or
     (set (#\A #\Z) #\_ (#\a #\z))
     (cat
      (set #\\)
      (set #\U)
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]"))
     (cat
      (set #\\)
      (set #\u)
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")
      (reg "[0-9A-Fa-f]")))
    (*
     (or
      (set (#\0 #\9))
      (set (#\A #\Z) #\_ (#\a #\z))
      (cat
       (set #\\)
       (set #\U)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\u)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))))))
  (Newline (or (set #\newline) (cat (set #\return) (? (set #\newline)))))
  (Constant
   (or
    (cat
     (set #\')
     (or
      (not (set #\newline #\return #\' #\\))
      (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
      (cat (set #\\) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat
       (set #\\)
       (set #\U)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\u)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\x)
       (reg "[0-9A-Fa-f]")
       (* (reg "[0-9A-Fa-f]"))))
     (*
      (or
       (not (set #\newline #\return #\' #\\))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]")))))
     (set #\'))
    (cat (set #\0) (set #\B #\b) (set (#\0 #\1)) (* (set (#\0 #\1))))
    (cat
     (set #\0)
     (set #\X #\x)
     (reg "[0-9A-Fa-f]")
     (* (reg "[0-9A-Fa-f]"))
     (or
      (cat (set #\P) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9))))
      (cat (set #\p) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9)))))
     (? (set #\F #\L #\f #\l)))
    (cat
     (set #\0)
     (set #\X #\x)
     (or
      (cat (reg "[0-9A-Fa-f]") (* (reg "[0-9A-Fa-f]")) (set #\.))
      (cat
       (? (+ (reg "[0-9A-Fa-f]")))
       (set #\.)
       (reg "[0-9A-Fa-f]")
       (* (reg "[0-9A-Fa-f]"))))
     (or
      (cat (set #\P) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9))))
      (cat (set #\p) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9)))))
     (? (set #\F #\L #\f #\l)))
    (cat
     (set (#\0 #\9))
     (* (set (#\0 #\9)))
     (or
      (cat (set #\E) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9))))
      (cat (set #\e) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9)))))
     (? (set #\F #\L #\f #\l)))
    (cat
     (set #\L)
     (set #\')
     (or
      (not (set #\newline #\return #\' #\\))
      (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
      (cat (set #\\) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat
       (set #\\)
       (set #\U)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\u)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\x)
       (reg "[0-9A-Fa-f]")
       (* (reg "[0-9A-Fa-f]"))))
     (*
      (or
       (not (set #\newline #\return #\' #\\))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]")))))
     (set #\'))
    (cat
     (set #\U)
     (set #\')
     (or
      (not (set #\newline #\return #\' #\\))
      (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
      (cat (set #\\) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat
       (set #\\)
       (set #\U)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\u)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\x)
       (reg "[0-9A-Fa-f]")
       (* (reg "[0-9A-Fa-f]"))))
     (*
      (or
       (not (set #\newline #\return #\' #\\))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]")))))
     (set #\'))
    (cat
     (set #\u)
     (set #\')
     (or
      (not (set #\newline #\return #\' #\\))
      (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
      (cat (set #\\) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
      (cat
       (set #\\)
       (set #\U)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\u)
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]")
       (reg "[0-9A-Fa-f]"))
      (cat
       (set #\\)
       (set #\x)
       (reg "[0-9A-Fa-f]")
       (* (reg "[0-9A-Fa-f]"))))
     (*
      (or
       (not (set #\newline #\return #\' #\\))
       (cat (set #\\) (set #\" #\' #\? #\\ (#\a #\b) #\f #\n #\r #\t #\v))
       (cat (set #\\) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat (set #\\) (set (#\0 #\7)) (set (#\0 #\7)) (set (#\0 #\7)))
       (cat
        (set #\\)
        (set #\U)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\u)
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]")
        (reg "[0-9A-Fa-f]"))
       (cat
        (set #\\)
        (set #\x)
        (reg "[0-9A-Fa-f]")
        (* (reg "[0-9A-Fa-f]")))))
     (set #\'))
    (cat
     (or
      (cat (set (#\0 #\9)) (* (set (#\0 #\9))) (set #\.))
      (cat (? (+ (set (#\0 #\9)))) (set #\.) (set (#\0 #\9)) (* (set (#\0 #\9)))))
     (?
      (or
       (cat (set #\E) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9))))
       (cat (set #\e) (? (set #\+ #\-)) (set (#\0 #\9)) (* (set (#\0 #\9))))))
     (? (set #\F #\L #\f #\l)))
    (cat
     (set #\0)
     (set #\X #\x)
     (reg "[0-9A-Fa-f]")
     (* (reg "[0-9A-Fa-f]"))
     (?
      (or
       (cat (set #\L #\l) (? (set #\U #\u)))
       (cat (set #\U #\u) (? (set #\L #\l)))
       (cat (set #\U #\u) (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))))
       (cat (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))) (? (set #\U #\u))))))
    (cat
     (set #\0)
     (* (set (#\0 #\7)))
     (?
      (or
       (cat (set #\L #\l) (? (set #\U #\u)))
       (cat (set #\U #\u) (? (set #\L #\l)))
       (cat (set #\U #\u) (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))))
       (cat (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))) (? (set #\U #\u))))))
    (cat
     (set (#\1 #\9))
     (* (set (#\0 #\9)))
     (?
      (or
       (cat (set #\L #\l) (? (set #\U #\u)))
       (cat (set #\U #\u) (? (set #\L #\l)))
       (cat (set #\U #\u) (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))))
       (cat (or (cat (set #\L) (set #\L)) (cat (set #\l) (set #\l))) (? (set #\U #\u))))))))
  (DigitSequence (+ (set (#\0 #\9))))
  )
